[{
  "history_id" : "u8747h7n4xs",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717260625831,
  "history_end_time" : 1717260625831,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "njkzururbzx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717258417380,
  "history_end_time" : 1717260624659,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "n59w26q7eho",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717233644377,
  "history_end_time" : 1717258424632,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "q6vy9uff6qg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717233051765,
  "history_end_time" : 1717233634229,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "o6o6ckplviy",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717183214962,
  "history_end_time" : 1717233633762,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "xspl7tqeroq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1717182654868,
  "history_end_time" : 1717182654868,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "gk2icyvise3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716612552447,
  "history_end_time" : 1717233631798,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "mayw7lyyqos",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716611582525,
  "history_end_time" : 1716612551153,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "utzyk30jbha",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716610207097,
  "history_end_time" : 1716611579207,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "il6kslp4j4n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716606646650,
  "history_end_time" : 1716610196711,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "pdfdmj29omv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716120710347,
  "history_end_time" : 1716610159514,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "stt6i60adws",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716068762989,
  "history_end_time" : 1716076012588,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "an17s8qr16n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1716068608549,
  "history_end_time" : 1716068760863,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "sdlz7p4027w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714808468662,
  "history_end_time" : 1714838057261,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "42ppost9y2k",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1714161440457,
  "history_end_time" : 1714161440457,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "ec74ielluhz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713966604341,
  "history_end_time" : 1713966604341,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "xgj9d8od3uf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1713935811078,
  "history_end_time" : 1713935811078,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "0391izr078t",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1712452760501,
  "history_end_time" : 1712452760501,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "5x332owaow3",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1712452402376,
  "history_end_time" : 1712452749959,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wecdih1aajx",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1712445947138,
  "history_end_time" : 1712445947138,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "4gc0din4972",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711723378016,
  "history_end_time" : 1711723378016,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "mc676wqc676",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711722163444,
  "history_end_time" : 1711723321971,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cl1rhnf89mm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711203851068,
  "history_end_time" : 1712452724075,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "58omh40qdk0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711136729439,
  "history_end_time" : 1711136729439,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Skipped"
},{
  "history_id" : "u2z1am4oweq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1711136573111,
  "history_end_time" : 1711136662810,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "dloyomb202i",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709930548090,
  "history_end_time" : 1712452725018,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "atl7hk44epp",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709930050141,
  "history_end_time" : 1709930509956,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yhewbik793w",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709444795631,
  "history_end_time" : 1712452725797,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "oyg72qhm8ei",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1709444438272,
  "history_end_time" : 1709444687345,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "WghYvHFTSt6x",
  "history_input" : "# traverse the output folder and create a PNG for every day\n# this doesn't use parallelization at all so it will be slow. \nimport os\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\nsample_lat_lon_csv = \"/groups/ESS3/zsun/firecasting/data/others/sample_lat_lon.csv\"\n\n\ndef save_predicted_frp_to_standard_netcdf(csv_file, sample_lat_lon_df):\n    \"\"\"\n    Get the ML results ready for downstream model inputs\n    \"\"\"\n    \n    pass\n\ndef save_predicted_frp_to_geotif(csv_file, sample_lat_lon_df):\n    \"\"\"\n    Get the ML results ready for public download and access\n    \"\"\"\n    # Read CSV into GeoDataFrame\n    df = gpd.read_csv(csv_file)\n\n    # Create GeoDataFrame with Point geometries\n    geometry = [Point(lon, lat) for lon, lat in zip(df['LON'], df['LAT'])]\n    gdf = gpd.GeoDataFrame(df, geometry=geometry, crs='EPSG:4326')\n\n    # Set up rasterization parameters\n    xmin, ymin, xmax, ymax = gdf.total_bounds\n    pixel_size = 0.01  # Adjust as needed\n    cols = int((xmax - xmin) / pixel_size)\n    rows = int((ymax - ymin) / pixel_size)\n\n    # Create an empty GeoTIFF file\n    with rasterio.open('output.tif', 'w', driver='GTiff', height=rows, width=cols,\n                       count=1, dtype='float32', crs='EPSG:4326',\n                       transform=from_origin(xmin, ymax, pixel_size, pixel_size)) as dst:\n\n        # Rasterize GeoDataFrame to the GeoTIFF file\n        gdf['value_column'] = gdf['your_value_column']  # Adjust 'your_value_column'\n        data = gdf[['value_column']].to_numpy().reshape((rows, cols))\n        dst.write(data, 1)\n\n        # Optionally, apply resampling if needed\n        if pixel_size != 0.01:\n            resampling = Resampling.nearest\n            data = data[np.newaxis, :, :]\n            new_data = np.empty((1, rows, cols), dtype='float32')\n            rasterio.warp.reproject(data, new_data, src_transform=dst.transform,\n                                    src_crs='EPSG:4326', dst_crs='EPSG:4326',\n                                    resampling=resampling)\n            dst.write(new_data)\n\n    print(\"GeoTIFF file created: output.tif\")\n    \n    \n    pass\n    \n\ndef plot_png(file_path, sample_lat_lon_df):\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    if 'LAT' not in df.columns:\n      # Merge 'lat' and 'lon' columns from df2 into df1\n      df[\"LAT\"] = sample_lat_lon_df[\"LAT\"]\n      df[\" LON\"] = sample_lat_lon_df[\" LON\"]\n\n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n\n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n        col_name = df.columns[i+2]\n        ax = axs[i]\n        # Create a scatter plot using two columns from the DataFrame\n        cmap = plt.get_cmap('hot')  # You can choose a different colormap\n        sm = ScalarMappable(cmap=cmap)\n        if \"FRP\" in col_name or \"Near\" in col_name:\n          # Define the minimum and maximum values for the color scale\n          min_value = 0  # Set your minimum value here\n          max_value = 50  # Set your maximum value here\n          # Create a color map and a normalization for the color scale\n          norm = Normalize(vmin=min_value, vmax=max_value)\n\n          ax.scatter(\n            df[' LON'], \n            df['LAT'], \n            c=df[col_name], \n            cmap=cmap, \n            s=5, \n            norm=norm,\n            edgecolors='none'\n          )\n          # Create a scalar mappable for the color bar\n          sm = ScalarMappable(cmap=cmap, norm=norm)\n        else:\n          min_value = df[col_name].min()\n          if min_value == -999:\n            min_value = 0\n          \n          max_value = df[col_name].max()\n          #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n          new_norm = Normalize(vmin=min_value, vmax=max_value)\n          sm = ScalarMappable(cmap=cmap, norm=new_norm)\n          ax.scatter(\n            df[' LON'], \n            df['LAT'], \n            c=df[col_name], \n            cmap=cmap, \n            norm=new_norm,\n            s=5,\n            edgecolors='none'\n          )\n          sm.set_array([])  # Set an empty array for the color bar\n\n        # Set the color bar's minimum and maximum values\n        # Add a color bar to the plot\n        color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n        # Set the color bar's minimum and maximum values using vmin and vmax\n        color_bar.set_ticks([min_value, max_value])\n        color_bar.set_ticklabels([min_value, max_value])\n\n        ax.set_title(f'{col_name}')\n\n        # Add labels and legend\n        #ax.set_xlabel('Longitude')\n        #ax.set_ylabel('Latitude')\n\n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n    \n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n    \n    sample_lat_lon_df = pd.read_csv(sample_lat_lon_csv)\n    \n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n        plot_png(file_path, sample_lat_lon_df)\n        save_predicted_frp_to_geotif(file_path, sample_lat_lon_df)\n        save_predicted_frp_to_standard_netcdf(file_path, sample_lat_lon_df)\n        \n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Float64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.UInt64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\n",
  "history_begin_time" : 1706459273955,
  "history_end_time" : 1706459293489,
  "history_notes" : "looks good, run in slurm",
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "e3WiQbvBJLUa",
  "history_input" : "# traverse the output folder and create a PNG for every day\n# this doesn't use parallelization at all so it will be slow. \nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\nsample_lat_lon_csv = \"/groups/ESS3/zsun/firecasting/data/others/sample_lat_lon.csv\"\n\n\ndef save_predicted_frp_to_standard_netcdf(csv_file, sample_lat_lon_df):\n    \"\"\"\n    Get the ML results ready for downstream model inputs\n    \"\"\"\n    \n    pass\n\ndef save_predicted_frp_to_geotif(csv_file, sample_lat_lon_df):\n    \"\"\"\n    Get the ML results ready for public download and access\n    \"\"\"\n    # Read CSV into GeoDataFrame\n    df = gpd.read_csv(csv_file)\n\n    # Create GeoDataFrame with Point geometries\n    geometry = [Point(lon, lat) for lon, lat in zip(df['LON'], df['LAT'])]\n    gdf = gpd.GeoDataFrame(df, geometry=geometry, crs='EPSG:4326')\n\n    # Set up rasterization parameters\n    xmin, ymin, xmax, ymax = gdf.total_bounds\n    pixel_size = 0.01  # Adjust as needed\n    cols = int((xmax - xmin) / pixel_size)\n    rows = int((ymax - ymin) / pixel_size)\n\n    # Create an empty GeoTIFF file\n    with rasterio.open('output.tif', 'w', driver='GTiff', height=rows, width=cols,\n                       count=1, dtype='float32', crs='EPSG:4326',\n                       transform=from_origin(xmin, ymax, pixel_size, pixel_size)) as dst:\n\n        # Rasterize GeoDataFrame to the GeoTIFF file\n        gdf['value_column'] = gdf['your_value_column']  # Adjust 'your_value_column'\n        data = gdf[['value_column']].to_numpy().reshape((rows, cols))\n        dst.write(data, 1)\n\n        # Optionally, apply resampling if needed\n        if pixel_size != 0.01:\n            resampling = Resampling.nearest\n            data = data[np.newaxis, :, :]\n            new_data = np.empty((1, rows, cols), dtype='float32')\n            rasterio.warp.reproject(data, new_data, src_transform=dst.transform,\n                                    src_crs='EPSG:4326', dst_crs='EPSG:4326',\n                                    resampling=resampling)\n            dst.write(new_data)\n\n    print(\"GeoTIFF file created: output.tif\")\n    \n    \n    pass\n    \n\ndef plot_png(file_path, sample_lat_lon_df):\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    if 'LAT' not in df.columns:\n      # Merge 'lat' and 'lon' columns from df2 into df1\n      df[\"LAT\"] = sample_lat_lon_df[\"LAT\"]\n      df[\" LON\"] = sample_lat_lon_df[\" LON\"]\n\n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n\n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n        col_name = df.columns[i+2]\n        ax = axs[i]\n        # Create a scatter plot using two columns from the DataFrame\n        cmap = plt.get_cmap('hot')  # You can choose a different colormap\n        sm = ScalarMappable(cmap=cmap)\n        if \"FRP\" in col_name or \"Near\" in col_name:\n          # Define the minimum and maximum values for the color scale\n          min_value = 0  # Set your minimum value here\n          max_value = 50  # Set your maximum value here\n          # Create a color map and a normalization for the color scale\n          norm = Normalize(vmin=min_value, vmax=max_value)\n\n          ax.scatter(\n            df[' LON'], \n            df['LAT'], \n            c=df[col_name], \n            cmap=cmap, \n            s=5, \n            norm=norm,\n            edgecolors='none'\n          )\n          # Create a scalar mappable for the color bar\n          sm = ScalarMappable(cmap=cmap, norm=norm)\n        else:\n          min_value = df[col_name].min()\n          if min_value == -999:\n            min_value = 0\n          \n          max_value = df[col_name].max()\n          #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n          new_norm = Normalize(vmin=min_value, vmax=max_value)\n          sm = ScalarMappable(cmap=cmap, norm=new_norm)\n          ax.scatter(\n            df[' LON'], \n            df['LAT'], \n            c=df[col_name], \n            cmap=cmap, \n            norm=new_norm,\n            s=5,\n            edgecolors='none'\n          )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n          plt.tight_layout()\n\n          res_png_path = f\"{file_path}.png\"\n          plt.savefig(res_png_path)\n          print(f\"test image is saved at {res_png_path}\")\n          plt.close()\n    \n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n    \n    sample_lat_lon_df = pd.read_csv(sample_lat_lon_csv)\n    \n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n        plot_png(file_path, sample_lat_lon_df)\n        save_predicted_frp_to_geotif(file_path, sample_lat_lon_df)\n        save_predicted_frp_to_standard_netcdf(file_path, sample_lat_lon_df)\n        \n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Float64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.UInt64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\nTraceback (most recent call last):\n  File \"plot_results.py\", line 169, in <module>\n    plot_images()\n  File \"plot_results.py\", line 161, in plot_images\n    save_predicted_frp_to_geotif(file_path, sample_lat_lon_df)\n  File \"plot_results.py\", line 27, in save_predicted_frp_to_geotif\n    df = gpd.read_csv(csv_file)\nNameError: name 'gpd' is not defined\n",
  "history_begin_time" : 1706459148940,
  "history_end_time" : 1706459158623,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "lFP5PabqrvyD",
  "history_input" : "# traverse the output folder and create a PNG for every day\n# this doesn't use parallelization at all so it will be slow. \nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\nsample_lat_lon_csv = \"/groups/ESS3/zsun/firecasting/data/others/sample_lat_lon.csv\"\n\n\ndef save_predicted_frp_to_standard_netcdf(csv_file):\n    \"\"\"\n    Get the ML results ready for downstream model inputs\n    \"\"\"\n    \n    pass\n\ndef save_predicted_frp_to_geotif(csv_file):\n    \"\"\"\n    Get the ML results ready for public download and access\n    \"\"\"\n    # Read CSV into GeoDataFrame\n    df = gpd.read_csv(csv_file)\n\n    # Create GeoDataFrame with Point geometries\n    geometry = [Point(lon, lat) for lon, lat in zip(df['LON'], df['LAT'])]\n    gdf = gpd.GeoDataFrame(df, geometry=geometry, crs='EPSG:4326')\n\n    # Set up rasterization parameters\n    xmin, ymin, xmax, ymax = gdf.total_bounds\n    pixel_size = 0.01  # Adjust as needed\n    cols = int((xmax - xmin) / pixel_size)\n    rows = int((ymax - ymin) / pixel_size)\n\n    # Create an empty GeoTIFF file\n    with rasterio.open('output.tif', 'w', driver='GTiff', height=rows, width=cols,\n                       count=1, dtype='float32', crs='EPSG:4326',\n                       transform=from_origin(xmin, ymax, pixel_size, pixel_size)) as dst:\n\n        # Rasterize GeoDataFrame to the GeoTIFF file\n        gdf['value_column'] = gdf['your_value_column']  # Adjust 'your_value_column'\n        data = gdf[['value_column']].to_numpy().reshape((rows, cols))\n        dst.write(data, 1)\n\n        # Optionally, apply resampling if needed\n        if pixel_size != 0.01:\n            resampling = Resampling.nearest\n            data = data[np.newaxis, :, :]\n            new_data = np.empty((1, rows, cols), dtype='float32')\n            rasterio.warp.reproject(data, new_data, src_transform=dst.transform,\n                                    src_crs='EPSG:4326', dst_crs='EPSG:4326',\n                                    resampling=resampling)\n            dst.write(new_data)\n\n    print(\"GeoTIFF file created: output.tif\")\n    \n    \n    pass\n    \n\ndef plot_png(file_path):\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    if 'LAT' not in df.columns:\n      # Merge 'lat' and 'lon' columns from df2 into df1\n      df[\"LAT\"] = sample_lat_lon_df[\"LAT\"]\n      df[\" LON\"] = sample_lat_lon_df[\" LON\"]\n\n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n\n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n        col_name = df.columns[i+2]\n        ax = axs[i]\n        # Create a scatter plot using two columns from the DataFrame\n        cmap = plt.get_cmap('hot')  # You can choose a different colormap\n        sm = ScalarMappable(cmap=cmap)\n        if \"FRP\" in col_name or \"Near\" in col_name:\n          # Define the minimum and maximum values for the color scale\n          min_value = 0  # Set your minimum value here\n          max_value = 50  # Set your maximum value here\n          # Create a color map and a normalization for the color scale\n          norm = Normalize(vmin=min_value, vmax=max_value)\n\n          ax.scatter(\n            df[' LON'], \n            df['LAT'], \n            c=df[col_name], \n            cmap=cmap, \n            s=5, \n            norm=norm,\n            edgecolors='none'\n          )\n          # Create a scalar mappable for the color bar\n          sm = ScalarMappable(cmap=cmap, norm=norm)\n        else:\n          min_value = df[col_name].min()\n          if min_value == -999:\n            min_value = 0\n          \n          max_value = df[col_name].max()\n          #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n          new_norm = Normalize(vmin=min_value, vmax=max_value)\n          sm = ScalarMappable(cmap=cmap, norm=new_norm)\n          ax.scatter(\n            df[' LON'], \n            df['LAT'], \n            c=df[col_name], \n            cmap=cmap, \n            norm=new_norm,\n            s=5,\n            edgecolors='none'\n          )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n          plt.tight_layout()\n\n          res_png_path = f\"{file_path}.png\"\n          plt.savefig(res_png_path)\n          print(f\"test image is saved at {res_png_path}\")\n          plt.close()\n    \n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n    \n    sample_lat_lon_df = pd.read_csv(sample_lat_lon_csv)\n    \n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n        plot_png(file_path)\n        save_predicted_frp_to_geotif(file_path)\n        save_predicted_frp_to_standard_netcdf(file_path)\n        \n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Float64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.UInt64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\nTraceback (most recent call last):\n  File \"plot_results.py\", line 169, in <module>\n    plot_images()\n  File \"plot_results.py\", line 160, in plot_images\n    plot_png(file_path)\n  File \"plot_results.py\", line 72, in plot_png\n    df[\"LAT\"] = sample_lat_lon_df[\"LAT\"]\nNameError: name 'sample_lat_lon_df' is not defined\n",
  "history_begin_time" : 1706459103027,
  "history_end_time" : 1706459106760,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "W7Un6ATBABjW",
  "history_input" : "# traverse the output folder and create a PNG for every day\n# this doesn't use parallelization at all so it will be slow. \nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\nsample_lat_lon_csv = \"/groups/ESS3/zsun/firecasting/data/others/sample_lat_lon.csv\"\n\n\ndef save_predicted_frp_to_standard_netcdf(csv_file):\n    \"\"\"\n    Get the ML results ready for downstream model inputs\n    \"\"\"\n    \n    pass\n\ndef save_predicted_frp_to_geotif(csv_file):\n    \"\"\"\n    Get the ML results ready for public download and access\n    \"\"\"\n    # Read CSV into GeoDataFrame\n    df = gpd.read_csv(csv_file)\n\n    # Create GeoDataFrame with Point geometries\n    geometry = [Point(lon, lat) for lon, lat in zip(df['LON'], df['LAT'])]\n    gdf = gpd.GeoDataFrame(df, geometry=geometry, crs='EPSG:4326')\n\n    # Set up rasterization parameters\n    xmin, ymin, xmax, ymax = gdf.total_bounds\n    pixel_size = 0.01  # Adjust as needed\n    cols = int((xmax - xmin) / pixel_size)\n    rows = int((ymax - ymin) / pixel_size)\n\n    # Create an empty GeoTIFF file\n    with rasterio.open('output.tif', 'w', driver='GTiff', height=rows, width=cols,\n                       count=1, dtype='float32', crs='EPSG:4326',\n                       transform=from_origin(xmin, ymax, pixel_size, pixel_size)) as dst:\n\n        # Rasterize GeoDataFrame to the GeoTIFF file\n        gdf['value_column'] = gdf['your_value_column']  # Adjust 'your_value_column'\n        data = gdf[['value_column']].to_numpy().reshape((rows, cols))\n        dst.write(data, 1)\n\n        # Optionally, apply resampling if needed\n        if pixel_size != 0.01:\n            resampling = Resampling.nearest\n            data = data[np.newaxis, :, :]\n            new_data = np.empty((1, rows, cols), dtype='float32')\n            rasterio.warp.reproject(data, new_data, src_transform=dst.transform,\n                                    src_crs='EPSG:4326', dst_crs='EPSG:4326',\n                                    resampling=resampling)\n            dst.write(new_data)\n\n    print(\"GeoTIFF file created: output.tif\")\n    \n    \n    pass\n    \n\ndef plot_png(file_path):\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    if 'LAT' not in df.columns:\n      # Merge 'lat' and 'lon' columns from df2 into df1\n      df[\"LAT\"] = sample_lat_lon_df[\"LAT\"]\n      df[\" LON\"] = sample_lat_lon_df[\" LON\"]\n\n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n\n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n        col_name = df.columns[i+2]\n        ax = axs[i]\n        # Create a scatter plot using two columns from the DataFrame\n        cmap = plt.get_cmap('hot')  # You can choose a different colormap\n        sm = ScalarMappable(cmap=cmap)\n        if \"FRP\" in col_name or \"Near\" in col_name:\n          # Define the minimum and maximum values for the color scale\n          min_value = 0  # Set your minimum value here\n          max_value = 50  # Set your maximum value here\n          # Create a color map and a normalization for the color scale\n          norm = Normalize(vmin=min_value, vmax=max_value)\n\n          ax.scatter(\n            df[' LON'], \n            df['LAT'], \n            c=df[col_name], \n            cmap=cmap, \n            s=5, \n            norm=norm,\n            edgecolors='none'\n          )\n          # Create a scalar mappable for the color bar\n          sm = ScalarMappable(cmap=cmap, norm=norm)\n        else:\n          min_value = df[col_name].min()\n          if min_value == -999:\n            min_value = 0\n          \n          max_value = df[col_name].max()\n          #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n          new_norm = Normalize(vmin=min_value, vmax=max_value)\n          sm = ScalarMappable(cmap=cmap, norm=new_norm)\n          ax.scatter(\n            df[' LON'], \n            df['LAT'], \n            c=df[col_name], \n            cmap=cmap, \n            norm=new_norm,\n            s=5,\n            edgecolors='none'\n          )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n          plt.tight_layout()\n\n          res_png_path = f\"{file_path}.png\"\n          plt.savefig(res_png_path)\n          print(f\"test image is saved at {res_png_path}\")\n          plt.close()\n    \n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n    \n    sample_lat_lon_df = pd.read_csv(sample_lat_lon_csv)\n    \n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n\t\tplot_png(file_path)\n        save_predicted_frp_to_geotif(file_path)\n        save_predicted_frp_to_standard_netcdf(file_path)\n        \n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "  File \"plot_results.py\", line 160\n    plot_png(file_path)\n                      ^\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1706459085698,
  "history_end_time" : 1706459085751,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "KWTK2gYqB71L",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\nfrom concurrent.futures import ThreadPoolExecutor\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\nsample_lat_lon_csv = \"/groups/ESS3/zsun/firecasting/data/others/sample_lat_lon.csv\"\n\n\ndef save_predicted_frp_to_standard_netcdf(csv_file, output_netcdf_file):\n    \"\"\"\n    Get the ML results ready for downstream model inputs\n    \"\"\"\n    \n    \n    pass\n\ndef save_predicted_frp_to_geotif(csv_file, output_geotif_file):\n    \"\"\"\n    Get the ML results ready for public download and access\n    \"\"\"\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n    \n    \n    pass\n    \n    \ndef process_csv_file(csv_file, output_folder, sample_lat_lon_df):\n    file_path = os.path.join(output_folder, csv_file)\n    df = pd.read_csv(file_path)\n\n    if 'LAT' not in df.columns:\n        df[\"LAT\"] = sample_lat_lon_df[\"LAT\"]\n        df[\" LON\"] = sample_lat_lon_df[\" LON\"]\n\n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    axs = np.array(axs).flatten()\n\n    for i in range(real_col_num):\n        col_name = df.columns[i+2]\n        ax = axs[i]\n        cmap = plt.get_cmap('hot')\n        sm = ScalarMappable(cmap=cmap)\n\n        if \"FRP\" in col_name or \"Near\" in col_name:\n            min_value = 0\n            max_value = 50\n            norm = Normalize(vmin=min_value, vmax=max_value)\n            ax.scatter(df[' LON'], df['LAT'], c=df[col_name], cmap=cmap, s=5, norm=norm, edgecolors='none')\n            sm = ScalarMappable(cmap=cmap, norm=norm)\n        else:\n            min_value = df[col_name].min()\n            if min_value == -999:\n                min_value = 0\n            max_value = df[col_name].max()\n            new_norm = Normalize(vmin=min_value, vmax=max_value)\n            sm = ScalarMappable(cmap=cmap, norm=new_norm)\n            ax.scatter(df[' LON'], df['LAT'], c=df[col_name], cmap=cmap, norm=new_norm, s=5, edgecolors='none')\n\n        sm.set_array([])\n        color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n        color_bar.set_ticks([min_value, max_value])\n        color_bar.set_ticklabels([min_value, max_value])\n        ax.set_title(f'{col_name}')\n\n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"Test image is saved at {res_png_path}\")\n    plt.close()\n\ndef process_csv_files(output_folder, sample_lat_lon_csv):\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n    sample_lat_lon_df = pd.read_csv(sample_lat_lon_csv)\n\n    with ThreadPoolExecutor() as executor:\n        executor.map(lambda csv_file: process_csv_file(csv_file, output_folder, sample_lat_lon_df), csv_files)\n\n    print(\"All done\")\n\n    \ndef plot_images():\n    process_csv_files(output_folder, sample_lat_lon_csv)\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Float64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.UInt64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n",
  "history_begin_time" : 1706456028075,
  "history_end_time" : 1706456036578,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "u64WDhB5Afez",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\nsample_lat_lon_csv = \"/groups/ESS3/zsun/firecasting/data/others/sample_lat_lon.csv\"\n\n\ndef save_predicted_frp_to_standard_netcdf(csv_file, output_netcdf_file):\n    \"\"\"\n    Get the ML results ready for downstream model inputs\n    \"\"\"\n    \n    \n    pass\n\ndef save_predicted_frp_to_geotif(csv_file, output_geotif_file):\n    \"\"\"\n    Get the ML results ready for public download and access\n    \"\"\"\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n    \n    \n    pass\n    \n    \ndef process_csv_file(csv_file, output_folder, sample_lat_lon_df):\n    file_path = os.path.join(output_folder, csv_file)\n    df = pd.read_csv(file_path)\n\n    if 'LAT' not in df.columns:\n        df[\"LAT\"] = sample_lat_lon_df[\"LAT\"]\n        df[\" LON\"] = sample_lat_lon_df[\" LON\"]\n\n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    axs = np.array(axs).flatten()\n\n    for i in range(real_col_num):\n        col_name = df.columns[i+2]\n        ax = axs[i]\n        cmap = plt.get_cmap('hot')\n        sm = ScalarMappable(cmap=cmap)\n\n        if \"FRP\" in col_name or \"Near\" in col_name:\n            min_value = 0\n            max_value = 50\n            norm = Normalize(vmin=min_value, vmax=max_value)\n            ax.scatter(df[' LON'], df['LAT'], c=df[col_name], cmap=cmap, s=5, norm=norm, edgecolors='none')\n            sm = ScalarMappable(cmap=cmap, norm=norm)\n        else:\n            min_value = df[col_name].min()\n            if min_value == -999:\n                min_value = 0\n            max_value = df[col_name].max()\n            new_norm = Normalize(vmin=min_value, vmax=max_value)\n            sm = ScalarMappable(cmap=cmap, norm=new_norm)\n            ax.scatter(df[' LON'], df['LAT'], c=df[col_name], cmap=cmap, norm=new_norm, s=5, edgecolors='none')\n\n        sm.set_array([])\n        color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n        color_bar.set_ticks([min_value, max_value])\n        color_bar.set_ticklabels([min_value, max_value])\n        ax.set_title(f'{col_name}')\n\n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"Test image is saved at {res_png_path}\")\n    plt.close()\n\ndef process_csv_files(output_folder, sample_lat_lon_csv):\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n    sample_lat_lon_df = pd.read_csv(sample_lat_lon_csv)\n\n    with ThreadPoolExecutor() as executor:\n        executor.map(lambda csv_file: process_csv_file(csv_file, output_folder, sample_lat_lon_df), csv_files)\n\n    print(\"All done\")\n\n    \ndef plot_images():\n    process_csv_files(output_folder, sample_lat_lon_csv)\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Float64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.UInt64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\nTraceback (most recent call last):\n  File \"plot_results.py\", line 96, in <module>\n    plot_images()\n  File \"plot_results.py\", line 93, in plot_images\n    process_csv_files(output_folder, sample_lat_lon_csv)\n  File \"plot_results.py\", line 86, in process_csv_files\n    with ThreadPoolExecutor() as executor:\nNameError: name 'ThreadPoolExecutor' is not defined\n",
  "history_begin_time" : 1706456001468,
  "history_end_time" : 1706456004716,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "RjISwptiM1Nr",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\nsample_lat_lon_csv = \"/groups/ESS3/zsun/firecasting/data/others/sample_lat_lon.csv\"\n\n\ndef save_predicted_frp_to_standard_netcdf(csv_file, output_netcdf_file):\n    \"\"\"\n    Get the ML results ready for downstream model inputs\n    \"\"\"\n    \n    \n    pass\n\ndef save_predicted_frp_to_geotif(csv_file, output_geotif_file):\n    \"\"\"\n    Get the ML results ready for public download and access\n    \"\"\"\n    \n    \n    pass\n    \n\n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n    \n    sample_lat_lon_df = pd.read_csv(sample_lat_lon_csv)\n    \n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n\n        # Read CSV into a DataFrame\n        df = pd.read_csv(file_path)\n        print(df.head())\n        \n        if 'LAT' not in df.columns:\n          # Merge 'lat' and 'lon' columns from df2 into df1\n          df[\"LAT\"] = sample_lat_lon_df[\"LAT\"]\n          df[\" LON\"] = sample_lat_lon_df[\" LON\"]\n\n        real_col_num = len(df.columns[2:])\n        num_rows = int(np.ceil(np.sqrt(real_col_num)))\n        num_cols = int(np.ceil(real_col_num / num_rows))\n\n        # Create a figure and axis objects\n        fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n        # Flatten the axs array if it's more than 1D\n        axs = np.array(axs).flatten()\n\n        for i in range(real_col_num):\n          col_name = df.columns[i+2]\n          ax = axs[i]\n          # Create a scatter plot using two columns from the DataFrame\n          cmap = plt.get_cmap('hot')  # You can choose a different colormap\n          sm = ScalarMappable(cmap=cmap)\n          if \"FRP\" in col_name or \"Near\" in col_name:\n            # Define the minimum and maximum values for the color scale\n            min_value = 0  # Set your minimum value here\n            max_value = 50  # Set your maximum value here\n            # Create a color map and a normalization for the color scale\n            norm = Normalize(vmin=min_value, vmax=max_value)\n\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              s=5, \n              norm=norm,\n              edgecolors='none'\n            )\n            # Create a scalar mappable for the color bar\n            sm = ScalarMappable(cmap=cmap, norm=norm)\n          else:\n            min_value = df[col_name].min()\n            if min_value == -999:\n              min_value = 0\n            max_value = df[col_name].max()\n            #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n            new_norm = Normalize(vmin=min_value, vmax=max_value)\n            sm = ScalarMappable(cmap=cmap, norm=new_norm)\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              norm=new_norm,\n              s=5,\n              edgecolors='none'\n            )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n        plt.tight_layout()\n\n        res_png_path = f\"{file_path}.png\"\n        plt.savefig(res_png_path)\n        print(f\"test image is saved at {res_png_path}\")\n        plt.close()\n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Float64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.UInt64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210718_predicted.txt.png\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210724_predicted.txt.png\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210721_predicted.txt.png\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210717_predicted.txt.png\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210715_predicted.txt.png\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210723_predicted.txt.png\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210726_predicted.txt.png\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210727_predicted.txt.png\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_15_days_forecasting/20210714/firedata_20210722_predicted.txt.png\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\n",
  "history_begin_time" : 1706455139764,
  "history_end_time" : 1706455671150,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "F9nRicORMywZ",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\n\n\ndef save_predicted_frp_to_geotif(csv_file, output_geotif_file):\n    \n    \n    \n    pass\n    \n\n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n    \n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n\n        # Read CSV into a DataFrame\n        df = pd.read_csv(file_path)\n        print(df.head())\n\n        real_col_num = len(df.columns[2:])\n        num_rows = int(np.ceil(np.sqrt(real_col_num)))\n        num_cols = int(np.ceil(real_col_num / num_rows))\n\n        # Create a figure and axis objects\n        fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n        # Flatten the axs array if it's more than 1D\n        axs = np.array(axs).flatten()\n\n        for i in range(real_col_num):\n          col_name = df.columns[i+2]\n          ax = axs[i]\n          # Create a scatter plot using two columns from the DataFrame\n          cmap = plt.get_cmap('hot')  # You can choose a different colormap\n          sm = ScalarMappable(cmap=cmap)\n          if \"FRP\" in col_name or \"Near\" in col_name:\n            # Define the minimum and maximum values for the color scale\n            min_value = 0  # Set your minimum value here\n            max_value = 50  # Set your maximum value here\n            # Create a color map and a normalization for the color scale\n            norm = Normalize(vmin=min_value, vmax=max_value)\n\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              s=5, \n              norm=norm,\n              edgecolors='none'\n            )\n            # Create a scalar mappable for the color bar\n            sm = ScalarMappable(cmap=cmap, norm=norm)\n          else:\n            min_value = df[col_name].min()\n            if min_value == -999:\n              min_value = 0\n            max_value = df[col_name].max()\n            #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n            new_norm = Normalize(vmin=min_value, vmax=max_value)\n            sm = ScalarMappable(cmap=cmap, norm=new_norm)\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              norm=new_norm,\n              s=5,\n              edgecolors='none'\n            )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n        plt.tight_layout()\n\n        res_png_path = f\"{file_path}.png\"\n        plt.savefig(res_png_path)\n        print(f\"test image is saved at {res_png_path}\")\n        plt.close()\n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Int64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.Float64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n/home/zsun/anaconda3/lib/python3.8/site-packages/dask/dataframe/utils.py:367: FutureWarning: pandas.UInt64Index is deprecated and will be removed from pandas in a future version. Use pandas.Index with the appropriate dtype instead.\n  _numeric_index_types = (pd.Int64Index, pd.Float64Index, pd.UInt64Index)\n     FWI    VPD   HT  ...  Nearest_23  Nearest_24  Predicted_FRP\n0 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n1 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n2 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n3 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n4 -999.0 -999.0  0.0  ...         0.0         0.0            0.0\n[5 rows x 44 columns]\nTraceback (most recent call last):\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: ' LON'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"plot_results.py\", line 111, in <module>\n    plot_images()\n  File \"plot_results.py\", line 76, in plot_images\n    df[' LON'], \n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: ' LON'\n",
  "history_begin_time" : 1706203532117,
  "history_end_time" : 1706203539771,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ncYtwjMqqZzF",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\n\n\ndef save_predicted_frp_to_geotif(csv_file, output_geotif_file):\n    \n    \n    \n    pass\n    \n\n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n    \n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n\n        # Read CSV into a DataFrame\n        df = pd.read_csv(file_path)\n        print(df.head())\n\n        real_col_num = len(df.columns[2:])\n        num_rows = int(np.ceil(np.sqrt(real_col_num)))\n        num_cols = int(np.ceil(real_col_num / num_rows))\n\n        # Create a figure and axis objects\n        fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n        # Flatten the axs array if it's more than 1D\n        axs = np.array(axs).flatten()\n\n        for i in range(real_col_num):\n          col_name = df.columns[i+2]\n          ax = axs[i]\n          # Create a scatter plot using two columns from the DataFrame\n          cmap = plt.get_cmap('hot')  # You can choose a different colormap\n          sm = ScalarMappable(cmap=cmap)\n          if \"FRP\" in col_name or \"Near\" in col_name:\n            # Define the minimum and maximum values for the color scale\n            min_value = 0  # Set your minimum value here\n            max_value = 50  # Set your maximum value here\n            # Create a color map and a normalization for the color scale\n            norm = Normalize(vmin=min_value, vmax=max_value)\n\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              s=5, \n              norm=norm,\n              edgecolors='none'\n            )\n            # Create a scalar mappable for the color bar\n            sm = ScalarMappable(cmap=cmap, norm=norm)\n          else:\n            min_value = df[col_name].min()\n            if min_value == -999:\n              min_value = 0\n            max_value = df[col_name].max()\n            #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n            new_norm = Normalize(vmin=min_value, vmax=max_value)\n            sm = ScalarMappable(cmap=cmap, norm=new_norm)\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              norm=new_norm,\n              s=5,\n              edgecolors='none'\n            )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n        plt.tight_layout()\n\n        res_png_path = f\"{file_path}.png\"\n        plt.savefig(res_png_path)\n        print(f\"test image is saved at {res_png_path}\")\n        plt.close()\n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_7_days_forecasting/20210714/firedata_20210716_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_7_days_forecasting/20210714/firedata_20210714_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_7_days_forecasting/20210714/firedata_20210715_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_7_days_forecasting/20210714/firedata_20210717_predicted.txt.png\nAll done\n",
  "history_begin_time" : 1705819014771,
  "history_end_time" : 1705819229694,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "7z5efUyrvMJk",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\n\n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n\n        # Read CSV into a DataFrame\n        df = pd.read_csv(file_path)\n        print(df.head())\n\n        real_col_num = len(df.columns[2:])\n        num_rows = int(np.ceil(np.sqrt(real_col_num)))\n        num_cols = int(np.ceil(real_col_num / num_rows))\n\n        # Create a figure and axis objects\n        fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n        # Flatten the axs array if it's more than 1D\n        axs = np.array(axs).flatten()\n\n        for i in range(real_col_num):\n          col_name = df.columns[i+2]\n          ax = axs[i]\n          # Create a scatter plot using two columns from the DataFrame\n          cmap = plt.get_cmap('hot')  # You can choose a different colormap\n          sm = ScalarMappable(cmap=cmap)\n          if \"FRP\" in col_name or \"Near\" in col_name:\n            # Define the minimum and maximum values for the color scale\n            min_value = 0  # Set your minimum value here\n            max_value = 50  # Set your maximum value here\n            # Create a color map and a normalization for the color scale\n            norm = Normalize(vmin=min_value, vmax=max_value)\n\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              s=5, \n              norm=norm,\n              edgecolors='none'\n            )\n            # Create a scalar mappable for the color bar\n            sm = ScalarMappable(cmap=cmap, norm=norm)\n          else:\n            min_value = df[col_name].min()\n            if min_value == -999:\n              min_value = 0\n            max_value = df[col_name].max()\n            #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n            new_norm = Normalize(vmin=min_value, vmax=max_value)\n            sm = ScalarMappable(cmap=cmap, norm=new_norm)\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              norm=new_norm,\n              s=5,\n              edgecolors='none'\n            )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n        plt.tight_layout()\n\n        res_png_path = f\"{file_path}.png\"\n        plt.savefig(res_png_path)\n        print(f\"test image is saved at {res_png_path}\")\n        plt.close()\n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\n",
  "history_begin_time" : 1705773377326,
  "history_end_time" : 1705773394373,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Nyqhffi3Yazj",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\n\n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n\n        # Read CSV into a DataFrame\n        df = pd.read_csv(file_path)\n        print(df.head())\n\n        real_col_num = len(df.columns[2:])\n        num_rows = int(np.ceil(np.sqrt(real_col_num)))\n        num_cols = int(np.ceil(real_col_num / num_rows))\n\n        # Create a figure and axis objects\n        fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n        # Flatten the axs array if it's more than 1D\n        axs = np.array(axs).flatten()\n\n        for i in range(real_col_num):\n          col_name = df.columns[i+2]\n          ax = axs[i]\n          # Create a scatter plot using two columns from the DataFrame\n          cmap = plt.get_cmap('hot')  # You can choose a different colormap\n          sm = ScalarMappable(cmap=cmap)\n          if \"FRP\" in col_name or \"Near\" in col_name:\n            # Define the minimum and maximum values for the color scale\n            min_value = 0  # Set your minimum value here\n            max_value = 50  # Set your maximum value here\n            # Create a color map and a normalization for the color scale\n            norm = Normalize(vmin=min_value, vmax=max_value)\n\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              s=5, \n              norm=norm,\n              edgecolors='none'\n            )\n            # Create a scalar mappable for the color bar\n            sm = ScalarMappable(cmap=cmap, norm=norm)\n          else:\n            min_value = df[col_name].min()\n            if min_value == -999:\n              min_value = 0\n            max_value = df[col_name].max()\n            #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n            new_norm = Normalize(vmin=min_value, vmax=max_value)\n            sm = ScalarMappable(cmap=cmap, norm=new_norm)\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              norm=new_norm,\n              s=5,\n              edgecolors='none'\n            )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n        plt.tight_layout()\n\n        res_png_path = f\"{file_path}.png\"\n        plt.savefig(res_png_path)\n        print(f\"test image is saved at {res_png_path}\")\n        plt.close()\n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\n",
  "history_begin_time" : 1705773376966,
  "history_end_time" : 1705773393930,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "HMe5imWWpw97",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\n\n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n\n        # Read CSV into a DataFrame\n        df = pd.read_csv(file_path)\n        print(df.head())\n\n        real_col_num = len(df.columns[2:])\n        num_rows = int(np.ceil(np.sqrt(real_col_num)))\n        num_cols = int(np.ceil(real_col_num / num_rows))\n\n        # Create a figure and axis objects\n        fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n        # Flatten the axs array if it's more than 1D\n        axs = np.array(axs).flatten()\n\n        for i in range(real_col_num):\n          col_name = df.columns[i+2]\n          ax = axs[i]\n          # Create a scatter plot using two columns from the DataFrame\n          cmap = plt.get_cmap('hot')  # You can choose a different colormap\n          sm = ScalarMappable(cmap=cmap)\n          if \"FRP\" in col_name or \"Near\" in col_name:\n            # Define the minimum and maximum values for the color scale\n            min_value = 0  # Set your minimum value here\n            max_value = 50  # Set your maximum value here\n            # Create a color map and a normalization for the color scale\n            norm = Normalize(vmin=min_value, vmax=max_value)\n\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              s=5, \n              norm=norm,\n              edgecolors='none'\n            )\n            # Create a scalar mappable for the color bar\n            sm = ScalarMappable(cmap=cmap, norm=norm)\n          else:\n            min_value = df[col_name].min()\n            if min_value == -999:\n              min_value = 0\n            max_value = df[col_name].max()\n            #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n            new_norm = Normalize(vmin=min_value, vmax=max_value)\n            sm = ScalarMappable(cmap=cmap, norm=new_norm)\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              norm=new_norm,\n              s=5,\n              edgecolors='none'\n            )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n        plt.tight_layout()\n\n        res_png_path = f\"{file_path}.png\"\n        plt.savefig(res_png_path)\n        print(f\"test image is saved at {res_png_path}\")\n        plt.close()\n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\n",
  "history_begin_time" : 1705773376590,
  "history_end_time" : 1705773393399,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "uYl04ABsk83X",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\n\n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n\n        # Read CSV into a DataFrame\n        df = pd.read_csv(file_path)\n        print(df.head())\n\n        real_col_num = len(df.columns[2:])\n        num_rows = int(np.ceil(np.sqrt(real_col_num)))\n        num_cols = int(np.ceil(real_col_num / num_rows))\n\n        # Create a figure and axis objects\n        fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n        # Flatten the axs array if it's more than 1D\n        axs = np.array(axs).flatten()\n\n        for i in range(real_col_num):\n          col_name = df.columns[i+2]\n          ax = axs[i]\n          # Create a scatter plot using two columns from the DataFrame\n          cmap = plt.get_cmap('hot')  # You can choose a different colormap\n          sm = ScalarMappable(cmap=cmap)\n          if \"FRP\" in col_name or \"Near\" in col_name:\n            # Define the minimum and maximum values for the color scale\n            min_value = 0  # Set your minimum value here\n            max_value = 50  # Set your maximum value here\n            # Create a color map and a normalization for the color scale\n            norm = Normalize(vmin=min_value, vmax=max_value)\n\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              s=5, \n              norm=norm,\n              edgecolors='none'\n            )\n            # Create a scalar mappable for the color bar\n            sm = ScalarMappable(cmap=cmap, norm=norm)\n          else:\n            min_value = df[col_name].min()\n            if min_value == -999:\n              min_value = 0\n            max_value = df[col_name].max()\n            #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n            new_norm = Normalize(vmin=min_value, vmax=max_value)\n            sm = ScalarMappable(cmap=cmap, norm=new_norm)\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              norm=new_norm,\n              s=5,\n              edgecolors='none'\n            )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n        plt.tight_layout()\n\n        res_png_path = f\"{file_path}.png\"\n        plt.savefig(res_png_path)\n        print(f\"test image is saved at {res_png_path}\")\n        plt.close()\n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210727_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210722_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210805_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210811_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210714_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210728_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210716_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210808_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210720_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210807_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210731_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210725_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210719_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210802_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210730_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210724_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210718_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210803_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210721_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210806_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210812_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210809_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210717_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210715_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210729_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210723_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210804_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210810_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210726_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210801_predicted.txt.png\nAll done\n",
  "history_begin_time" : 1705772090906,
  "history_end_time" : 1705773590915,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "S8xv4e6yc4Gu",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\noutput_folder = f\"/groups/ESS3/zsun/firecasting/data/output/{output_folder_name}/20210714/\"\n\n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n\n        # Read CSV into a DataFrame\n        df = pd.read_csv(file_path)\n        print(df.head())\n\n        real_col_num = len(df.columns[2:])\n        num_rows = int(np.ceil(np.sqrt(real_col_num)))\n        num_cols = int(np.ceil(real_col_num / num_rows))\n\n        # Create a figure and axis objects\n        fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n        # Flatten the axs array if it's more than 1D\n        axs = np.array(axs).flatten()\n\n        for i in range(real_col_num):\n          col_name = df.columns[i+2]\n          ax = axs[i]\n          # Create a scatter plot using two columns from the DataFrame\n          cmap = plt.get_cmap('hot')  # You can choose a different colormap\n          sm = ScalarMappable(cmap=cmap)\n          if \"FRP\" in col_name:\n            # Define the minimum and maximum values for the color scale\n            min_value = 0  # Set your minimum value here\n            max_value = 300  # Set your maximum value here\n            # Create a color map and a normalization for the color scale\n            norm = Normalize(vmin=min_value, vmax=max_value)\n\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              s=5, \n              norm=norm,\n              edgecolors='none'\n            )\n            # Create a scalar mappable for the color bar\n            sm = ScalarMappable(cmap=cmap, norm=norm)\n          else:\n            min_value = df[col_name].min()\n            if min_value == -999:\n              min_value = 0\n            max_value = df[col_name].max()\n            #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n            new_norm = Normalize(vmin=min_value, vmax=max_value)\n            sm = ScalarMappable(cmap=cmap, norm=new_norm)\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              norm=new_norm,\n              s=5,\n              edgecolors='none'\n            )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n        plt.tight_layout()\n\n        res_png_path = f\"{file_path}.png\"\n        plt.savefig(res_png_path)\n        print(f\"test image is saved at {res_png_path}\")\n        plt.close()\n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210727_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210722_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210805_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210811_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210714_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210728_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210716_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210808_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210720_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210807_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210731_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210725_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210719_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210802_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210730_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210724_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210718_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210803_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210721_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210806_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210812_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210809_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210717_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210715_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210729_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210723_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210804_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210810_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210726_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0              0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0              0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0              0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0              0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0              0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_no_current_day_new/20210714/firedata_20210801_predicted.txt.png\nAll done\n",
  "history_begin_time" : 1705763357632,
  "history_end_time" : 1705764901615,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "FDR8oVWGKM69",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\nfrom fc_model_predict_2weeks import output_folder_name\n\n#output_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/\"\n\ndef plot_images():\n    # List all CSV files in the directory\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n    # Iterate through each CSV file\n    for csv_file in csv_files:\n        # Construct the full file path\n        file_path = os.path.join(output_folder, csv_file)\n\n        # Read CSV into a DataFrame\n        df = pd.read_csv(file_path)\n        print(df.head())\n\n        real_col_num = len(df.columns[2:])\n        num_rows = int(np.ceil(np.sqrt(real_col_num)))\n        num_cols = int(np.ceil(real_col_num / num_rows))\n\n        # Create a figure and axis objects\n        fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n        # Flatten the axs array if it's more than 1D\n        axs = np.array(axs).flatten()\n\n        for i in range(real_col_num):\n          col_name = df.columns[i+2]\n          ax = axs[i]\n          # Create a scatter plot using two columns from the DataFrame\n          cmap = plt.get_cmap('hot')  # You can choose a different colormap\n          sm = ScalarMappable(cmap=cmap)\n          if \"FRP\" in col_name:\n            # Define the minimum and maximum values for the color scale\n            min_value = 0  # Set your minimum value here\n            max_value = 300  # Set your maximum value here\n            # Create a color map and a normalization for the color scale\n            norm = Normalize(vmin=min_value, vmax=max_value)\n\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              s=5, \n              norm=norm,\n              edgecolors='none'\n            )\n            # Create a scalar mappable for the color bar\n            sm = ScalarMappable(cmap=cmap, norm=norm)\n          else:\n            min_value = df[col_name].min()\n            if min_value == -999:\n              min_value = 0\n            max_value = df[col_name].max()\n            #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n            new_norm = Normalize(vmin=min_value, vmax=max_value)\n            sm = ScalarMappable(cmap=cmap, norm=new_norm)\n            ax.scatter(\n              df[' LON'], \n              df['LAT'], \n              c=df[col_name], \n              cmap=cmap, \n              norm=new_norm,\n              s=5,\n              edgecolors='none'\n            )\n          sm.set_array([])  # Set an empty array for the color bar\n\n          # Set the color bar's minimum and maximum values\n          # Add a color bar to the plot\n          color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n          # Set the color bar's minimum and maximum values using vmin and vmax\n          color_bar.set_ticks([min_value, max_value])\n          color_bar.set_ticklabels([min_value, max_value])\n\n          ax.set_title(f'{col_name}')\n\n          # Add labels and legend\n          #ax.set_xlabel('Longitude')\n          #ax.set_ylabel('Latitude')\n\n        plt.tight_layout()\n\n        res_png_path = f\"{file_path}.png\"\n        plt.savefig(res_png_path)\n        print(f\"test image is saved at {res_png_path}\")\n        plt.close()\n\n    print(\"All done\")\n\n    \nif __name__ == \"__main__\":\n    plot_images()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"plot_results.py\", line 104, in <module>\n    plot_images()\n  File \"plot_results.py\", line 14, in plot_images\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\nNameError: name 'output_folder' is not defined\n",
  "history_begin_time" : 1705763325918,
  "history_end_time" : 1705763328118,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "L4sBBb7xOO7G",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      cmap = plt.get_cmap('hot')  # You can choose a different colormap\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\t\t# Create a color map and a normalization for the color scale\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "start to run fc_model_predict_2weeks.sh\n/home/zsun/gw-workspace/bJ6mX5Hkskbv\nwrite the slurm script into fc_model_predict_2weeks_slurm_generated.sh\nsbatch fc_model_predict_2weeks_slurm_generated.sh\njob_id=1345405\nJob 1345405 has finished with state: JobState=TIMEOUT\n\nStream closed",
  "history_begin_time" : 1702139760985,
  "history_end_time" : 1702175355884,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "DyEVrSuJ7gNA",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      cmap = plt.get_cmap('hot')  # You can choose a different colormap\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\t\t# Create a color map and a normalization for the color scale\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210724_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210730_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210803_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210718_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210721_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210812_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210806_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210809_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210717_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210715_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210729_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210723_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210810_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210804_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210726_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210801_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210727_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210722_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210811_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210805_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210714_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210728_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210716_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210808_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210720_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210807_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210725_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210731_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210802_predicted.txt.png\n    LAT         LON    FWI  ...  Nearest_23  Nearest_24  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...         0.0         0.0            0.0\n1  24.5 -125.899994 -999.0  ...         0.0         0.0            0.0\n2  24.5 -125.800003 -999.0  ...         0.0         0.0            0.0\n3  24.5 -125.699997 -999.0  ...         0.0         0.0            0.0\n4  24.5 -125.599998 -999.0  ...         0.0         0.0            0.0\n[5 rows x 46 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_window_2020_one_month_15_layers/20210714/firedata_20210719_predicted.txt.png\nAll done\n",
  "history_begin_time" : 1701366280315,
  "history_end_time" : 1701367379109,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "RK1PT1ZdTMeI",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers//20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      cmap = plt.get_cmap('hot')  # You can choose a different colormap\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\t\t# Create a color map and a normalization for the color scale\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "",
  "history_begin_time" : 1701366248504,
  "history_end_time" : 1701366257702,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "alepMMmAq4d8",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers//20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      cmap = plt.get_cmap('hot')  # You can choose a different colormap\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\t\t# Create a color map and a normalization for the color scale\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1697831107782,
  "history_end_time" : 1697831516074,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "M25ZluCQBuo0",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      cmap = plt.get_cmap('hot')  # You can choose a different colormap\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\t\t# Create a color map and a normalization for the color scale\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210717_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210809_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210812_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210806_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210721_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210803_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210718_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210724_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210730_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210801_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210726_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210810_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210804_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210723_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210729_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210715_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210728_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210714_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210811_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210805_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210722_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210727_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210802_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210719_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210725_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210731_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210807_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210720_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210808_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/firedata_20210716_predicted.txt.png\nAll done\n",
  "history_begin_time" : 1696507378778,
  "history_end_time" : 1696508101760,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "hDxpYBgQnKnC",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      cmap = plt.get_cmap('YlOrBr')  # You can choose a different colormap\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\t\t# Create a color map and a normalization for the color scale\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1696506796511,
  "history_end_time" : 1696507373072,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Qg4DoTtozvTq",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_one_month_15_layers/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      cmap = plt.get_cmap('YIOrBr')  # You can choose a different colormap\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\t\t# Create a color map and a normalization for the color scale\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\n FWI\nTraceback (most recent call last):\n  File \"plot_results.py\", line 39, in <module>\n    cmap = plt.get_cmap('YIOrBr')  # You can choose a different colormap\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/matplotlib/cm.py\", line 204, in get_cmap\n    cbook._check_in_list(sorted(_cmap_registry), name=name)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/matplotlib/cbook/__init__.py\", line 2266, in _check_in_list\n    raise ValueError(\nValueError: 'YIOrBr' is not a valid value for name; supported values are 'Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'turbo', 'turbo_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'winter', 'winter_r'\n",
  "history_begin_time" : 1696506752317,
  "history_end_time" : 1696506754894,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "aWQGQl6Nuzml",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      cmap = plt.get_cmap('hot')  # You can choose a different colormap\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\t\t# Create a color map and a normalization for the color scale\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1696505958919,
  "history_end_time" : 1696506746322,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "HyWzFXe3UUYh",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      cmap = plt.get_cmap('hot')  # You can choose a different colormap\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\t\t# Create a color map and a normalization for the color scale\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        #cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "",
  "history_begin_time" : 1696505633403,
  "history_end_time" : 1696505869138,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "nMJqK6BS8oYl",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      cmap = plt.get_cmap('hot')  # You can choose a different colormap\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\t\t# Create a color map and a normalization for the color scale\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "",
  "history_begin_time" : 1696505518350,
  "history_end_time" : 1696505628237,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "DHdUQXiBNCkf",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      \n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\t\t# Create a color map and a normalization for the color scale\n        cmap = plt.get_cmap('hot')  # You can choose a different colormap\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\n FWI\nTraceback (most recent call last):\n  File \"plot_results.py\", line 40, in <module>\n    sm = ScalarMappable(cmap=cmap)\nNameError: name 'cmap' is not defined\n",
  "history_begin_time" : 1696505394583,
  "history_end_time" : 1696505396447,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "4RHAUchgoe3n",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      \n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        # Define the minimum and maximum values for the color scale\n        min_value = 0  # Set your minimum value here\n        max_value = 300  # Set your maximum value here\n\n        # Create a color map and a normalization for the color scale\n        cmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n\n        norm = Normalize(vmin=min_value, vmax=max_value)\n        \n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\n FWI\nTraceback (most recent call last):\n  File \"plot_results.py\", line 40, in <module>\n    sm = ScalarMappable(cmap=cmap)\nNameError: name 'cmap' is not defined\n",
  "history_begin_time" : 1696505252853,
  "history_end_time" : 1696505254828,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "K8AYr1wNPWQb",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(28, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      \n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        min_value = df[col_name].min()\n        if min_value == -999:\n          min_value = 0\n        max_value = df[col_name].max()\n        new_norm = Normalize(vmin=min_value, vmax=max_value)\n        sm = ScalarMappable(cmap=cmap, norm=new_norm)\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          norm=new_norm,\n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1696504680225,
  "history_end_time" : 1696505247669,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "KVxLA4TgDH8L",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(22, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      min_value = df[col_name].min()\n      max_value = df[col_name].max()\n      new_norm = Normalize(vmin=min_value, vmax=max_value)\n      sm = ScalarMappable(cmap=cmap, norm=new_norm)\n      if \"FRP\" in col_name:\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1696504026765,
  "history_end_time" : 1696504663981,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "gSF6vMX3Kylk",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('coolwarm')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(20, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      min_value = df[col_name].min()\n      max_value = df[col_name].max()\n      new_norm = Normalize(vmin=min_value, vmax=max_value)\n      sm = ScalarMappable(cmap=cmap, norm=new_norm)\n      if \"FRP\" in col_name:\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\n FWI\n VPD\n HT\n T\n RH\n U\n V\n P\n RAIN\n CAPE\n ST\n SM\n FRP_day0\n FRP_day1\n FRP_day2\n FRP_day3\n FRP_day4\n FRP_day5\n FRP_day6\nPredicted_FRP\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210801_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\n FWI\n VPD\n HT\n T\n RH\n U\n V\n P\n RAIN\n CAPE\n ST\n SM\n FRP_day0\n FRP_day1\n FRP_day2\n FRP_day3\n FRP_day4\n FRP_day5\n FRP_day6\nPredicted_FRP\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210723_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\n FWI\n VPD\n HT\n T\n RH\n U\n V\n P\n RAIN\n CAPE\n ST\n SM\n FRP_day0\n FRP_day1\n FRP_day2\n FRP_day3\n FRP_day4\n FRP_day5\n FRP_day6\nPredicted_FRP\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210810_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\n FWI\n VPD\n HT\n T\n RH\n U\n V\n P\n RAIN\n CAPE\n ST\n SM\n FRP_day0\n FRP_day1\n FRP_day2\n FRP_day3\n FRP_day4\n FRP_day5\n FRP_day6\nPredicted_FRP\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210804_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\n FWI\n VPD\n HT\n T\n RH\n U\n V\n P\n RAIN\n CAPE\n ST\n SM\n FRP_day0\n FRP_day1\n FRP_day2\n FRP_day3\n FRP_day4\n FRP_day5\n FRP_day6\nPredicted_FRP\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210715_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n FWI\n\nStream closed",
  "history_begin_time" : 1696503960918,
  "history_end_time" : 1696504013820,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "zIqBB4E6QV3e",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('hot')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(20, 24))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      #ax.set_xlabel('Longitude')\n      #ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1696503476110,
  "history_end_time" : 1696503955133,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "cmXhENfqzWu7",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('hot')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(12, 8))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      ax.set_xlabel('Longitude')\n      ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1696503106937,
  "history_end_time" : 1696503466644,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "UErbqQ5jqe7O",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('hot')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(12, 8))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      sm = ScalarMappable(cmap=cmap)\n      if \"FRP\" in col_name:\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5, \n          norm=norm,\n          edgecolors='none'\n        )\n        # Create a scalar mappable for the color bar\n        sm = ScalarMappable(cmap=cmap, norm=norm)\n      else:\n        ax.scatter(\n          df[' LON'], \n          df['LAT'], \n          c=df[col_name], \n          cmap=cmap, \n          s=5,\n          edgecolors='none'\n        )\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, orientation='horizontal', ax=ax)\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      ax.set_xlabel('Longitude')\n      ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "",
  "history_begin_time" : 1696503060729,
  "history_end_time" : 1696503088566,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "SKmMIjPZEv4i",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('hot')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(12, 8))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      ax.scatter(\n        df[' LON'], \n        df['LAT'], \n        c=df[col_name], \n        cmap=cmap, \n        s=5, \n        norm=norm,\n        edgecolors='none'\n      )\n      # Create a scalar mappable for the color bar\n      sm = ScalarMappable(cmap=cmap, norm=norm)\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, label='Color Scale', orientation='horizontal')\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n      color_bar.set_label(col_name)\n\n      ax.set_title(f'{col_name}')\n\n      # Add labels and legend\n      ax.set_xlabel('Longitude')\n      ax.set_ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1696502361050,
  "history_end_time" : 1696503088551,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "nPTOfdV4ffoe",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('hot')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(12, 8))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      print(col_name)\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      ax.scatter(\n        df[' LON'], \n        df['LAT'], \n        c=df[col_name], \n        cmap=cmap, \n        s=5, \n        norm=norm,\n        edgecolors='none'\n      )\n      # Create a scalar mappable for the color bar\n      sm = ScalarMappable(cmap=cmap, norm=norm)\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, label='Color Scale', orientation='horizontal')\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n      color_bar.set_label(col_name)\n\n      #ax.title(f'{col_name}')\n\n      # Add labels and legend\n      ax.xlabel('Longitude')\n      ax.ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\n FWI\nTraceback (most recent call last):\n  File \"plot_results.py\", line 71, in <module>\n    ax.xlabel('Longitude')\nAttributeError: 'AxesSubplot' object has no attribute 'xlabel'\n",
  "history_begin_time" : 1696502315180,
  "history_end_time" : 1696502317112,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "9SqjmAENyreH",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('hot')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(12, 8))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(real_col_num):\n      col_name = df.columns[i+2]\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      ax.scatter(\n        df[' LON'], \n        df['LAT'], \n        c=df[col_name], \n        cmap=cmap, \n        s=5, \n        norm=norm,\n        edgecolors='none'\n      )\n      # Create a scalar mappable for the color bar\n      sm = ScalarMappable(cmap=cmap, norm=norm)\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, label='Color Scale', orientation='horizontal')\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n      color_bar.set_label(col_name)\n\n      ax.title(f'{col_name}')\n\n      # Add labels and legend\n      ax.xlabel('Longitude')\n      ax.ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\nTraceback (most recent call last):\n  File \"plot_results.py\", line 67, in <module>\n    ax.title(f'{col_name}')\nTypeError: 'Text' object is not callable\n",
  "history_begin_time" : 1696502255465,
  "history_end_time" : 1696502257114,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "HTqdH7L9ksz9",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\nimport numpy as np\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('hot')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(12, 8))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(num_variables):\n      col_name = df.columns[i+2]\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      ax.scatter(\n        df[' LON'], \n        df['LAT'], \n        c=df[col_name], \n        cmap=cmap, \n        s=5, \n        norm=norm,\n        edgecolors='none'\n      )\n      # Create a scalar mappable for the color bar\n      sm = ScalarMappable(cmap=cmap, norm=norm)\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, label='Color Scale', orientation='horizontal')\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n      color_bar.set_label(col_name)\n\n      ax.title(f'{col_name}')\n\n      # Add labels and legend\n      ax.xlabel('Longitude')\n      ax.ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\nTraceback (most recent call last):\n  File \"plot_results.py\", line 41, in <module>\n    for i in range(num_variables):\nNameError: name 'num_variables' is not defined\n",
  "history_begin_time" : 1696502235267,
  "history_end_time" : 1696502236861,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ftFFo971gzK0",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('hot')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n    \n    real_col_num = len(df.columns[2:])\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\n    num_cols = int(np.ceil(real_col_num / num_rows))\n    \n    # Create a figure and axis objects\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(12, 8))\n    # Flatten the axs array if it's more than 1D\n    axs = np.array(axs).flatten()\n    \n    for i in range(num_variables):\n      col_name = df.columns[i+2]\n      ax = axs[i]\n      # Create a scatter plot using two columns from the DataFrame\n      ax.scatter(\n        df[' LON'], \n        df['LAT'], \n        c=df[col_name], \n        cmap=cmap, \n        s=5, \n        norm=norm,\n        edgecolors='none'\n      )\n      # Create a scalar mappable for the color bar\n      sm = ScalarMappable(cmap=cmap, norm=norm)\n      sm.set_array([])  # Set an empty array for the color bar\n\n      # Set the color bar's minimum and maximum values\n      # Add a color bar to the plot\n      color_bar = plt.colorbar(sm, label='Color Scale', orientation='horizontal')\n\n      # Set the color bar's minimum and maximum values using vmin and vmax\n      color_bar.set_ticks([min_value, max_value])\n      color_bar.set_ticklabels([min_value, max_value])\n      color_bar.set_label(col_name)\n\n      ax.title(f'{col_name}')\n\n      # Add labels and legend\n      ax.xlabel('Longitude')\n      ax.ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\nTraceback (most recent call last):\n  File \"plot_results.py\", line 32, in <module>\n    num_rows = int(np.ceil(np.sqrt(real_col_num)))\nNameError: name 'np' is not defined\n",
  "history_begin_time" : 1696502218417,
  "history_end_time" : 1696502220066,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "EgDBUUJYqrK8",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('viridis')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    plt.figure(figsize=(12, 6))\n    \n    plt.subplot(1, 2, 1)\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      norm=norm,\n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    # Create a scalar mappable for the color bar\n    sm = ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Set an empty array for the color bar\n\n    # Set the color bar's minimum and maximum values\n    # Add a color bar to the plot\n    color_bar = plt.colorbar(sm, label='Color Scale', orientation='horizontal')\n\n    # Set the color bar's minimum and maximum values using vmin and vmax\n    color_bar.set_ticks([min_value, max_value])\n    color_bar.set_ticklabels([min_value, max_value])\n    color_bar.set_label('Predicted FRP')\n    \n    plt.title(f'AI FRP Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n    \n    plt.subplot(1, 2, 2) \n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\" FRP_day0\"], \n      cmap='viridis', \n      s=5, \n      norm=norm,\n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    # Create a scalar mappable for the color bar\n    sm = ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Set an empty array for the color bar\n\n    # Set the color bar's minimum and maximum values\n    # Add a color bar to the plot\n    color_bar = plt.colorbar(sm, label='Color Scale', orientation='horizontal')\n\n    # Set the color bar's minimum and maximum values using vmin and vmax\n    color_bar.set_ticks([min_value, max_value])\n    color_bar.set_ticklabels([min_value, max_value])\n    color_bar.set_label(' FRP_day0')\n    \n    plt.title(f'FRP Day 0')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210726_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210801_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210723_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210810_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210804_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210715_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210729_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210717_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210809_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210721_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210812_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210806_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210724_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210730_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210803_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210718_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210725_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210731_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210802_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210719_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210720_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210807_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210808_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210716_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210714_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210728_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210722_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210811_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210805_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210727_predicted.txt.png\nAll done\n",
  "history_begin_time" : 1696501361597,
  "history_end_time" : 1696501458931,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "ICVVDcEn7ppU",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('viridis')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    plt.figure(figsize=(12, 6))\n    \n    plt.subplot(1, 2, 1)\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      norm=norm,\n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    # Create a scalar mappable for the color bar\n    sm = ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Set an empty array for the color bar\n\n    # Set the color bar's minimum and maximum values\n    # Add a color bar to the plot\n    color_bar = plt.colorbar(sm, label='Color Scale', orientation='horizontal')\n\n    # Set the color bar's minimum and maximum values using vmin and vmax\n    color_bar.set_ticks([min_value, max_value])\n    color_bar.set_ticklabels([min_value, max_value])\n    color_bar.set_label('Predicted FRP')\n    \n    plt.title(f'AI FRP Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n    \n    plt.subplot(1, 2, 2) \n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\" FRP\"], \n      cmap='viridis', \n      s=5, \n      norm=norm,\n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    # Create a scalar mappable for the color bar\n    sm = ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Set an empty array for the color bar\n\n    # Set the color bar's minimum and maximum values\n    # Add a color bar to the plot\n    color_bar = plt.colorbar(sm, label='Color Scale', orientation='horizontal')\n\n    # Set the color bar's minimum and maximum values using vmin and vmax\n    color_bar.set_ticks([min_value, max_value])\n    color_bar.set_ticklabels([min_value, max_value])\n    color_bar.set_label(' FRP_day0')\n    \n    plt.title(f'FRP Day 0')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n    \n    plt.tight_layout()\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\nTraceback (most recent call last):\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: ' FRP'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"plot_results.py\", line 67, in <module>\n    c=df[\" FRP\"], \n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: ' FRP'\n",
  "history_begin_time" : 1696501316658,
  "history_end_time" : 1696501319186,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "x6rqzMH8Q0By",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('viridis')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    plt.figure(figsize=(12, 6))\n    \n    \n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      norm=norm,\n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    # Create a scalar mappable for the color bar\n    sm = ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Set an empty array for the color bar\n\n    # Set the color bar's minimum and maximum values\n    # Add a color bar to the plot\n    color_bar = plt.colorbar(sm, label='Color Scale', orientation='vertical')\n\n    # Set the color bar's minimum and maximum values using vmin and vmax\n    color_bar.set_ticks([min_value, max_value])\n    color_bar.set_ticklabels([min_value, max_value])\n    color_bar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210726_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210801_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210723_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210810_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210804_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210715_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210729_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210717_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210809_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210721_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210812_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210806_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210724_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210730_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210803_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210718_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210725_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210731_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210802_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210719_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210720_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210807_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210808_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210716_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210714_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210728_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210722_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210811_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210805_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210727_predicted.txt.png\nAll done\n",
  "history_begin_time" : 1696019770862,
  "history_end_time" : 1696019817732,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Nhr9DSa4uo2Y",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('viridis')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    plt.figure()\n    \n    \n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      norm=norm,\n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    # Create a scalar mappable for the color bar\n    sm = ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Set an empty array for the color bar\n\n    # Set the color bar's minimum and maximum values\n    # Add a color bar to the plot\n    color_bar = plt.colorbar(sm, label='Color Scale', orientation='vertical')\n\n    # Set the color bar's minimum and maximum values using vmin and vmax\n    color_bar.set_ticks([min_value, max_value])\n    color_bar.set_ticklabels([min_value, max_value])\n    color_bar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210726_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210801_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210723_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210810_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210804_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210715_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210729_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210717_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210809_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210721_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210812_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210806_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210724_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210730_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210803_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210718_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210725_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210731_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210802_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210719_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210720_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210807_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210808_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210716_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210714_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210728_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210722_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210811_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210805_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210727_predicted.txt.png\nAll done\n",
  "history_begin_time" : 1696019572621,
  "history_end_time" : 1696019618289,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "Y9FqcMHMuQBd",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('viridis')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    plt.figure()\n    \n    \n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      norm=norm,\n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    # Create a scalar mappable for the color bar\n    sm = ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Set an empty array for the color bar\n\n    # Set the color bar's minimum and maximum values\n    # Add a color bar to the plot\n    color_bar = plt.colorbar(sm, label='Color Scale', orientation='vertical')\n\n    # Set the color bar's minimum and maximum values using vmin and vmax\n    color_bar.set_ticks([min_value, max_value])\n    color_bar.set_ticklabels([min_value, max_value])\n    color_bar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210726_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210801_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210723_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210810_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210804_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210715_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210729_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210717_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210809_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210721_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210812_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210806_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210724_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210730_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210803_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210718_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210725_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210731_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210802_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210719_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210720_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210807_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210808_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210716_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210714_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210728_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210722_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210811_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210805_predicted.txt.png\n    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\ntest image is saved at /groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/firedata_20210727_predicted.txt.png\nAll done\n",
  "history_begin_time" : 1696019386787,
  "history_end_time" : 1696019438228,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "W3aT6npx2mNO",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\nfrom matplotlib.cm import ScalarMappable\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('viridis')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    plt.figure()\n    \n    \n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      norm=norm,\n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    # Create a scalar mappable for the color bar\n    sm = ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Set an empty array for the color bar\n\n    # Add a color bar to the plot\n    cbar = plt.colorbar(sm, label='Color Scale')\n\n    # Set the color bar's minimum and maximum values\n    cbar.set_clim(min_value, max_value)\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\nTraceback (most recent call last):\n  File \"plot_results.py\", line 53, in <module>\n    cbar.set_clim(min_value, max_value)\nAttributeError: 'Colorbar' object has no attribute 'set_clim'\n",
  "history_begin_time" : 1696019314815,
  "history_end_time" : 1696019316338,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "CRPEvLPExh7A",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import Normalize\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('viridis')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    plt.figure()\n    \n    \n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      norm=norm,\n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    # Create a scalar mappable for the color bar\n    sm = ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Set an empty array for the color bar\n\n    # Add a color bar to the plot\n    cbar = plt.colorbar(sm, label='Color Scale')\n\n    # Set the color bar's minimum and maximum values\n    cbar.set_clim(min_value, max_value)\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\nTraceback (most recent call last):\n  File \"plot_results.py\", line 45, in <module>\n    sm = ScalarMappable(cmap=cmap, norm=norm)\nNameError: name 'ScalarMappable' is not defined\n",
  "history_begin_time" : 1696019143098,
  "history_end_time" : 1696019146216,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ld0hiOAxVHge",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Define the minimum and maximum values for the color scale\nmin_value = 0  # Set your minimum value here\nmax_value = 300  # Set your maximum value here\n\n# Create a color map and a normalization for the color scale\ncmap = plt.get_cmap('viridis')  # You can choose a different colormap\n\nnorm = Normalize(vmin=min_value, vmax=max_value)\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    plt.figure()\n    \n    \n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      norm=norm,\n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    # Create a scalar mappable for the color bar\n    sm = ScalarMappable(cmap=cmap, norm=norm)\n    sm.set_array([])  # Set an empty array for the color bar\n\n    # Add a color bar to the plot\n    cbar = plt.colorbar(sm, label='Color Scale')\n\n    # Set the color bar's minimum and maximum values\n    cbar.set_clim(min_value, max_value)\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"plot_results.py\", line 18, in <module>\n    norm = Normalize(vmin=min_value, vmax=max_value)\nNameError: name 'Normalize' is not defined\n",
  "history_begin_time" : 1696019120710,
  "history_end_time" : 1696019122826,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "KVGkpiy9CIFk",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    plt.figure()\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1696018455266,
  "history_end_time" : 1696019115498,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "FRmWNRr6HFzh",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n    plt.close()\n\nprint(\"All done\")\n\n",
  "history_output" : "No handles with labels found to put in legend.\nNo handles with labels found to put in legend.\nNo handles with labels found to put in legend.\nNo handles with labels found to put in legend.\nNo handles with labels found to put in legend.\nNo handles with labels found to put in legend.\nNo handles with labels found to put in legend.\n",
  "history_begin_time" : 1696018418605,
  "history_end_time" : 1696018442170,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "8A7OeGNPB08y",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n\nprint(\"All done\")\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1696017830720,
  "history_end_time" : 1696018274648,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "h4uUi3RMWFAQ",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\" Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n\nprint(\"All done\")\n\n",
  "history_output" : "No handles with labels found to put in legend.\nNo handles with labels found to put in legend.\nNo handles with labels found to put in legend.\n\nStream closed",
  "history_begin_time" : 1696017814363,
  "history_end_time" : 1696017821744,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "nBK241b6ST3z",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df[' LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n\nprint(\"All done\")\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1696017807788,
  "history_end_time" : 1696018276010,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "K5Bkby49H9hf",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt') and f.startswith('firedata_')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df['LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n\nprint(\"All done\")\n\n",
  "history_output" : "    LAT         LON    FWI  ...   FRP_day5   FRP_day6  Predicted_FRP\n0  24.5 -126.000000 -999.0  ...        0.0        0.0            0.0\n1  24.5 -125.899994 -999.0  ...        0.0        0.0            0.0\n2  24.5 -125.800003 -999.0  ...        0.0        0.0            0.0\n3  24.5 -125.699997 -999.0  ...        0.0        0.0            0.0\n4  24.5 -125.599998 -999.0  ...        0.0        0.0            0.0\n[5 rows x 22 columns]\nTraceback (most recent call last):\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'LON'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"plot_results.py\", line 22, in <module>\n    df['LON'], \n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'LON'\n",
  "history_begin_time" : 1696017742093,
  "history_end_time" : 1696017744114,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "ShwHqkFriwEA",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n    print(df.head())\n\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df['LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n\nprint(\"All done\")\n\n",
  "history_output" : "       Mean Absolute Error (MAE): 109.73741372034208\n0        Mean Squared Error (MSE): 138061.0505993354\n1  Root Mean Squared Error (RMSE): 371.5656746785626\n2          R-squared (R2) Score: -118.15282890070905\n3      Explained Variance Score: -107.87966163746572\n4   Mean Squared Log Error (MSLE): 7.754219953663237\nTraceback (most recent call last):\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'LON'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"plot_results.py\", line 22, in <module>\n    df['LON'], \n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'LON'\n",
  "history_begin_time" : 1696017712352,
  "history_end_time" : 1696017713211,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "DRHInnzHy7Vi",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df['LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n\nprint(\"All done\")\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3621, in get_loc\n    return self._engine.get_loc(casted_key)\n  File \"pandas/_libs/index.pyx\", line 136, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/index.pyx\", line 163, in pandas._libs.index.IndexEngine.get_loc\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5198, in pandas._libs.hashtable.PyObjectHashTable.get_item\n  File \"pandas/_libs/hashtable_class_helper.pxi\", line 5206, in pandas._libs.hashtable.PyObjectHashTable.get_item\nKeyError: 'LON'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"plot_results.py\", line 21, in <module>\n    df['LON'], \n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\", line 3505, in __getitem__\n    indexer = self.columns.get_loc(key)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\", line 3623, in get_loc\n    raise KeyError(key) from err\nKeyError: 'LON'\n",
  "history_begin_time" : 1696017692167,
  "history_end_time" : 1696017693450,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "5O1V3ebCkaYr",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\nimport pandas as pd\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df['LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n\nprint(\"All done\")\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"plot_results.py\", line 19, in <module>\n    plt.scatter(\nNameError: name 'plt' is not defined\n",
  "history_begin_time" : 1696017670284,
  "history_end_time" : 1696017671701,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "b3sGiv2vHnZ5",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(output_folder, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df['LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n\nprint(\"All done\")\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"plot_results.py\", line 15, in <module>\n    df = pd.read_csv(file_path)\nNameError: name 'pd' is not defined\n",
  "history_begin_time" : 1696017657856,
  "history_end_time" : 1696017657894,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "LgiXyvZdlYil",
  "history_input" : "# traverse the output folder and create a PNG for every day\nimport os\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(csv_dir, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df['LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n\nprint(\"All done\")\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"plot_results.py\", line 12, in <module>\n    file_path = os.path.join(csv_dir, csv_file)\nNameError: name 'csv_dir' is not defined\n",
  "history_begin_time" : 1696017634870,
  "history_end_time" : 1696017634909,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "p6uMLIOVVzhn",
  "history_input" : "# traverse the output folder and create a PNG for every day\n\noutput_folder = \"/groups/ESS3/zsun/firecasting/data/output/output_xgboost_2020_two_months/20210714/\"\n\n# List all CSV files in the directory\ncsv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt')]\n\n# Iterate through each CSV file\nfor csv_file in csv_files:\n    # Construct the full file path\n    file_path = os.path.join(csv_dir, csv_file)\n\n    # Read CSV into a DataFrame\n    df = pd.read_csv(file_path)\n\n    # Create a scatter plot using two columns from the DataFrame\n    plt.scatter(\n      df['LON'], \n      df['LAT'], \n      c=df[\"Predicted_FRP\"], \n      cmap='viridis', \n      s=5, \n      edgecolors='none'\n    )  # Replace 'x_column' and 'y_column' with your column names\n    cbar = plt.colorbar()\n    cbar.set_label('Predicted SWE')\n    \n    plt.title(f'Wildfire Fire Radiative Power Prediction Map')\n\n    # Add labels and legend\n    plt.xlabel('Longitude')\n    plt.ylabel('Latitude')\n\n    plt.legend()\n    res_png_path = f\"{file_path}.png\"\n    plt.savefig(res_png_path)\n    print(f\"test image is saved at {res_png_path}\")\n\nprint(\"All done\")\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"plot_results.py\", line 6, in <module>\n    csv_files = [f for f in os.listdir(output_folder) if f.endswith('.txt')]\nNameError: name 'os' is not defined\n",
  "history_begin_time" : 1696017623640,
  "history_end_time" : 1696017623689,
  "history_notes" : null,
  "history_process" : "xku47i",
  "host_id" : null,
  "indicator" : "Failed"
},]
